sample.df <- rbind(sample.df,sample_n(as.data.frame(df),size = n.vec[i]))
idx.sample <- plyr::match_df(as.data.frame(df),sample.df) %>% rownames() %>% as.numeric()
#remove those rows from the old dataframe
df <- df[-idx.sample, ]
list.sample[[i]] <- sample.df
}
return(list(list.sample,df))
}
n <- c(500,1000,2000,2500,3000,3500,4000)
sample.out <- get_sample((df.full),n)
get_sample <- function(df, n){
#outputs a list of dataframes, with samples of varying size
#method is meant to mimic scenario where data is collected over time so sample size gets larger.
#n.vec - vector with samples sizes desired
n.vec <- c(n[1],diff(n))
list.sample <- list(length(n.vec))
sample.df <- data.frame(matrix(ncol = ncol(df), nrow = 0))
for(i in 1:length(n.vec)){
#get sample and index in original df
print(nrow(df));print(nrow(sample.df))
sample.df <- rbind(sample.df,sample_n(as.data.frame(df),size = n.vec[i]))
idx.sample <- plyr::match_df(as.data.frame(df),sample.df) %>% rownames() %>% as.numeric()
#remove those rows from the old dataframe
df <- df[-idx.sample, ]
list.sample[[i]] <- sample.df
}
return(list(list.sample,df))
}
n <- c(500,1000,2000,2500,3000,3500,4000)
sample.out <- get_sample((df.full),n)
get_sample <- function(df, n){
#outputs a list of dataframes, with samples of varying size
#method is meant to mimic scenario where data is collected over time so sample size gets larger.
#n.vec - vector with samples sizes desired
n.vec <- c(n[1],diff(n))
list.sample <- list(length(n.vec))
sample.df <- data.frame(matrix(ncol = ncol(df), nrow = 0))
for(i in 1:length(n.vec)){
#get sample and index in original df
sample.df <- rbind(sample.df,sample_n(as.data.frame(df),size = n.vec[i]))
idx.sample <- plyr::match_df(as.data.frame(df),sample.df) %>% rownames() %>% as.numeric()
#remove those rows from the old dataframe
df <- df[-idx.sample, ]
print(nrow(df));print(nrow(sample.df))
list.sample[[i]] <- sample.df
}
return(list(list.sample,df))
}
n <- c(500,1000,2000,2500,3000,3500,4000)
sample.out <- get_sample((df.full),n)
966 - 500
4300 - 500
3800 - 1000
get_sample <- function(df, n){
#outputs a list of dataframes, with samples of varying size
#method is meant to mimic scenario where data is collected over time so sample size gets larger.
#n.vec - vector with samples sizes desired
n.vec <- c(n[1],diff(n))
list.sample <- list(length(n.vec))
sample.df <- data.frame(matrix(ncol = ncol(df), nrow = 0))
for(i in 1:length(n.vec)){
#get sample and index in original df
sample.df <- rbind(sample.df,sample_n(as.data.frame(df),size = n.vec[i]))
idx.sample <- plyr::match_df(as.data.frame(df),sample.df) %>% rownames() %>% as.numeric()
#remove those rows from the old dataframe
length(idx.sample)
df <- df[-idx.sample, ]
list.sample[[i]] <- sample.df
}
return(list(list.sample,df))
}
n <- c(500,1000,2000,2500,3000,3500,4000)
sample.out <- get_sample((df.full),n)
sample.list <- sample.out[[1]]
get_sample <- function(df, n){
#outputs a list of dataframes, with samples of varying size
#method is meant to mimic scenario where data is collected over time so sample size gets larger.
#n.vec - vector with samples sizes desired
n.vec <- c(n[1],diff(n))
list.sample <- list(length(n.vec))
sample.df <- data.frame(matrix(ncol = ncol(df), nrow = 0))
for(i in 1:length(n.vec)){
#get sample and index in original df
sample.df <- rbind(sample.df,sample_n(as.data.frame(df),size = n.vec[i]))
idx.sample <- plyr::match_df(as.data.frame(df),sample.df) %>% rownames() %>% as.numeric()
#remove those rows from the old dataframe
print(length(idx.sample))
df <- df[-idx.sample, ]
list.sample[[i]] <- sample.df
}
return(list(list.sample,df))
}
n <- c(500,1000,2000,2500,3000,3500,4000)
sample.out <- get_sample((df.full),n)
get_sample <- function(df, n){
#outputs a list of dataframes, with samples of varying size
#method is meant to mimic scenario where data is collected over time so sample size gets larger.
#n.vec - vector with samples sizes desired
n.vec <- c(n[1],diff(n))
list.sample <- list(length(n.vec))
sample.df <- data.frame(matrix(ncol = ncol(df), nrow = 0))
print(n.vec)
for(i in 1:length(n.vec)){
#get sample and index in original df
sample.df <- rbind(sample.df,sample_n(as.data.frame(df),size = n.vec[i]))
idx.sample <- plyr::match_df(as.data.frame(df),sample.df) %>% rownames() %>% as.numeric()
#remove those rows from the old dataframe
print(length(idx.sample))
df <- df[-idx.sample, ]
list.sample[[i]] <- sample.df
}
return(list(list.sample,df))
}
n <- c(500,1000,2000,2500,3000,3500,4000)
sample.out <- get_sample((df.full),n)
get_sample <- function(df, n){
#outputs a list of dataframes, with samples of varying size
#method is meant to mimic scenario where data is collected over time so sample size gets larger.
#n.vec - vector with samples sizes desired
n.vec <- c(n[1],diff(n))
list.sample <- list(length(n.vec))
sample.df <- data.frame(matrix(ncol = ncol(df), nrow = 0))
print(n.vec)
for(i in 1:length(n.vec)){
#get sample and index in original df
sample.df <- rbind(sample.df,sample_n(as.data.frame(df),size = n.vec[i]))
idx.sample <- plyr::match_df(as.data.frame(df),sample.df) %>% rownames() %>% as.numeric()
#remove those rows from the old dataframe
print(nrow(sample.df))
df <- df[-idx.sample, ]
list.sample[[i]] <- sample.df
}
return(list(list.sample,df))
}
n <- c(500,1000,2000,2500,3000,3500,4000)
sample.out <- get_sample((df.full),n)
get_sample <- function(df, n){
#outputs a list of dataframes, with samples of varying size
#method is meant to mimic scenario where data is collected over time so sample size gets larger.
#n.vec - vector with samples sizes desired
n.vec <- c(n[1],diff(n))
list.sample <- list(length(n.vec))
sample.df <- data.frame(matrix(ncol = ncol(df), nrow = 0))
print(n.vec)
for(i in 1:length(n.vec)){
#get sample and index in original df
sample.df <- rbind(sample.df,sample_n(as.data.frame(df),size = n.vec[i]))
#idx.sample <- plyr::match_df(as.data.frame(df),sample.df) %>% rownames() %>% as.numeric()
#remove those rows from the old dataframe
print(nrow(sample.df));print(nrow(df))
df <- df[-as.numeric(rownames(sample.df)), ]
list.sample[[i]] <- sample.df
}
return(list(list.sample,df))
}
n <- c(500,1000,2000,2500,3000,3500,4000)
sample.out <- get_sample((df.full),n)
get_sample <- function(df, n){
#outputs a list of dataframes, with samples of varying size
#method is meant to mimic scenario where data is collected over time so sample size gets larger.
#n.vec - vector with samples sizes desired
n.vec <- c(n[1],diff(n))
list.sample <- list(length(n.vec))
sample.df <- data.frame(matrix(ncol = ncol(df), nrow = 0))
print(n.vec)
for(i in 1:length(n.vec)){
print(nrow(sample.df));print(nrow(df))
#get sample and index in original df
sample.df <- rbind(sample.df,sample_n(as.data.frame(df),size = n.vec[i]))
#idx.sample <- plyr::match_df(as.data.frame(df),sample.df) %>% rownames() %>% as.numeric()
#remove those rows from the old dataframe
df <- df[-as.numeric(rownames(sample.df)), ]
list.sample[[i]] <- sample.df
}
return(list(list.sample,df))
}
n <- c(500,1000,2000,2500,3000,3500,4000)
sample.out <- get_sample((df.full),n)
sum(n)
sum(c(n[1],diff(n)))
get_sample <- function(df, n){
#outputs a list of dataframes, with samples of varying size
#method is meant to mimic scenario where data is collected over time so sample size gets larger.
#n.vec - vector with samples sizes desired
n.vec <- c(n[1],diff(n))
list.sample <- list(length(n.vec))
sample.df <- data.frame(matrix(ncol = ncol(df), nrow = 0))
print(n.vec)
for(i in 1:length(n.vec)){
#get sample and index in original df
sample.df <- rbind(sample.df,sample_n((df),size = n.vec[i]))
print(nrow(sample.df))
#idx.sample <- plyr::match_df(as.data.frame(df),sample.df) %>% rownames() %>% as.numeric()
#remove those rows from the old dataframe
df <- df[-as.numeric(rownames(sample.df)), ]
print(nrow(df))
list.sample[[i]] <- sample.df
}
return(list(list.sample,df))
}
n <- c(500,1000,2000,2500,3000,3500,4000)
sample.out <- get_sample((df.full),n)
get_sample <- function(df, n){
#outputs a list of dataframes, with samples of varying size
#method is meant to mimic scenario where data is collected over time so sample size gets larger.
#n.vec - vector with samples sizes desired
n.vec <- c(n[1],diff(n))
list.sample <- list(length(n.vec))
sample.df <- data.frame(matrix(ncol = ncol(df), nrow = 0))
print(n.vec)
for(i in 1:length(n.vec)){
#get sample and index in original df
sample.df <- rbind(sample.df,sample_n((df),size = n.vec[i]))
print(nrow(sample.df))
idx.sample <- plyr::match_df((df),sample.df) %>% rownames() %>% as.numeric()
#remove those rows from the old dataframe
df <- df[-as.numeric(rownames(sample.df)), ]
print(nrow(df))
list.sample[[i]] <- sample.df
}
return(list(list.sample,df))
}
n <- c(500,1000,2000,2500,3000,3500,4000)
sample.out <- get_sample((df.full),n)
ddf.full
df.full
as.data.frame(df.full)
for(i in 1:length(n.vec)){
#get sample and index in original df
sample.df <- rbind(sample.df,sample_n(tibble(df),size = n.vec[i]))
print(nrow(sample.df))
idx.sample <- plyr::match_df(tibble(df),sample.df) %>% rownames() %>% as.numeric()
#remove those rows from the old dataframe
df <- df[-as.numeric(rownames(sample.df)), ]
print(nrow(df))
list.sample[[i]] <- sample.df
}
get_sample <- function(df, n){
#outputs a list of dataframes, with samples of varying size
#method is meant to mimic scenario where data is collected over time so sample size gets larger.
#n.vec - vector with samples sizes desired
n.vec <- c(n[1],diff(n))
list.sample <- list(length(n.vec))
sample.df <- data.frame(matrix(ncol = ncol(df), nrow = 0))
print(n.vec)
for(i in 1:length(n.vec)){
#get sample and index in original df
sample.df <- rbind(sample.df,sample_n(tibble(df),size = n.vec[i]))
print(nrow(sample.df))
idx.sample <- plyr::match_df(tibble(df),sample.df) %>% rownames() %>% as.numeric()
#remove those rows from the old dataframe
df <- df[-as.numeric(rownames(sample.df)), ]
print(nrow(df))
list.sample[[i]] <- sample.df
}
return(list(list.sample,df))
}
n <- c(500,1000,2000,2500,3000,3500,4000)
sample.out <- get_sample((df.full),n)
i = 2
i = 2
n.vec <- c(n[1],diff(n))
list.sample <- list(length(n.vec))
sample.df <- data.frame(matrix(ncol = ncol(df), nrow = 0))
df <- df.full
sample.df <- data.frame(matrix(ncol = ncol(df), nrow = 0))
sample.df
i = 1
#get sample and index in original df
sample.df <- rbind(sample.df,sample_n(tibble(df),size = n.vec[i]))
nrow(sample.df)
idx.sample <- plyr::match_df(tibble(df),sample.df) %>% rownames() %>% as.numeric()
sample.df
colnames(df)
colnames(df.full)
#get sample and index in original df
sample.df <- rbind(sample.df,sample_n((df),size = n.vec[i]))
df <- df.full
#get sample and index in original df
sample.df <- rbind(sample.df,sample_n((df),size = n.vec[i]))
#get sample and index in original df
sample.df <- rbind(sample.df,sample_n(df,size = n.vec[i]))
sample.df <- data.frame(matrix(ncol = ncol(df), nrow = 0))
#get sample and index in original df
sample.df <- rbind(sample.df,sample_n(df,size = n.vec[i]))
sample.df
idx.sample <- plyr::match_df(df,sample.df) %>% rownames() %>% as.numeric()
idx.sample
#remove those rows from the old dataframe
df <- df[-as.numeric(rownames(sample.df)), ]
print(nrow(df))
list.sample[[i]] <- sample.df
i = 2
#get sample and index in original df
sample.df <- rbind(sample.df,sample_n(df,size = n.vec[i]))
print(nrow(sample.df))
idx.sample <- plyr::match_df(df,sample.df) %>% rownames() %>% as.numeric()
idx.sample
length(idx.sample)
nrow(sample.df)
nrow(df)
nrow(sample.df)
#idx.sample <- plyr::match_df(df,sample.df) %>% rownames() %>% as.numeric()
#remove those rows from the old dataframe
df <- df[-as.numeric(rownames(sample.df)), ]
nrow(df)
n.vec[i]
get_sample <- function(df, n){
#outputs a list of dataframes, with samples of varying size
#method is meant to mimic scenario where data is collected over time so sample size gets larger.
#n.vec - vector with samples sizes desired
n.vec <- c(n[1],diff(n))
list.sample <- list(length(n.vec))
sample.df <- data.frame(matrix(ncol = ncol(df), nrow = 0))
print(n.vec)
for(i in 1:length(n.vec)){
#get sample and index in original df
sample.df <- rbind(sample.df,sample_n(df,size = n.vec[i]))
print(nrow(sample.df))
#idx.sample <- plyr::match_df(df,sample.df) %>% rownames() %>% as.numeric()
#remove those rows from the old dataframe
df <- df[-as.numeric(rownames(sample.df)), ]
print(nrow(df))
list.sample[[i]] <- sample.df
}
return(list(list.sample,df))
}
n <- c(500,1000,2000,2500,3000,3500,4000)
sample.out <- get_sample((df.full),n)
i
#get sample and index in original df
idx.sample <- sample(df,n.vec[i])
df
nrow(df)
df <- df.full
nrow(df)
#get sample and index in original df
idx.sample <- sample(df,n.vec[i])
?sample
#get sample and index in original df
idx.sample <- sample(1:nrow(df),n.vec[i])
idx.sample
get_sample <- function(df, n){
#outputs a list of dataframes, with samples of varying size
#method is meant to mimic scenario where data is collected over time so sample size gets larger.
#n.vec - vector with samples sizes desired
n.vec <- c(n[1],diff(n))
list.sample <- list(length(n.vec))
sample.df <- data.frame(matrix(ncol = ncol(df), nrow = 0))
print(n.vec)
for(i in 1:length(n.vec)){
#get sample and index in original df
idx.sample <- sample(1:nrow(df),n.vec[i])
sample.df <- rbind(sample.df,df[idx.sample,])#rbind(sample.df,sample_n(df,size = n.vec[i]))
print(nrow(sample.df))
#idx.sample <- plyr::match_df(df,sample.df) %>% rownames() %>% as.numeric()
#remove those rows from the old dataframe
df <- df[-idx.sample, ]
print(nrow(df))
list.sample[[i]] <- sample.df
}
return(list(list.sample,df))
}
n <- c(500,1000,2000,2500,3000,3500,4000)
sample.out <- get_sample((df.full),n)
get_sample <- function(df, n){
#outputs a list of dataframes, with samples of varying size
#method is meant to mimic scenario where data is collected over time so sample size gets larger.
#n.vec - vector with samples sizes desired
n.vec <- c(n[1],diff(n))
list.sample <- list(length(n.vec))
sample.df <- data.frame(matrix(ncol = ncol(df), nrow = 0))
print(n.vec)
for(i in 1:length(n.vec)){
#get sample and index in original df
idx.sample <- sample(1:nrow(df),n.vec[i])
sample.df <- rbind(sample.df,df[idx.sample,])
print(nrow(sample.df))
#remove those rows from the old dataframe
df <- df[-idx.sample, ]
print(nrow(df))
list.sample[[i]] <- sample.df
}
return(list(list.sample,df))
}
df.raw <- read_csv('../data/SD_for_Ash.csv')
#change type to categorical for relevant variables
factor.vars <- c("sex","Abnormal_BCS","hivFinal","bednet","final_outcome_death", "boiling", "hivMaternal", "malaria", "sibling_deaths")
del.vars <- c("water_source_drinking")
#clean up
df.raw <- df.raw %>%
select(-del.vars) %>%
mutate_at(vars(factor.vars), funs(factor))
#change factor to str
df.raw$final_outcome_death <- make.names(df.raw$final_outcome_death)
#centre and scale
df.scaled <- scale(df.raw %>% select(-c(factor.vars, W_AZ, W_LZ,BMI_AZ)))
df.full <- cbind(as.data.frame(df.scaled), df.raw %>% select(factor.vars, W_AZ, W_LZ, BMI_AZ))
df.full <- df.full %>%
mutate(temp2 = temperature*temperature)
df.matrix <- model.matrix(final_outcome_death ~ . , df.full)
#remove df
rm(df.raw)
get_sample <- function(df, n){
#outputs a list of dataframes, with samples of varying size
#method is meant to mimic scenario where data is collected over time so sample size gets larger.
#n.vec - vector with samples sizes desired
n.vec <- c(n[1],diff(n))
list.sample <- list(length(n.vec))
sample.df <- data.frame(matrix(ncol = ncol(df), nrow = 0))
print(n.vec)
for(i in 1:length(n.vec)){
#get sample and index in original df
idx.sample <- sample(1:nrow(df),n.vec[i])
sample.df <- rbind(sample.df,df[idx.sample,])
print(nrow(sample.df))
#remove those rows from the old dataframe
df <- df[-idx.sample, ]
print(nrow(df))
list.sample[[i]] <- sample.df
}
return(list(list.sample,df))
}
n <- c(500,1000,2000,2500,3000,3500,4000)
sample.out <- get_sample((df.full),n)
sample.list <- sample.out[[1]]
test.df <- sample.out[[2]]
train.df <- sample.list[[7]]
test.df <- sample.out[[2]]
train.df
nrow(train.df)
nrow(test.df)
?write.csv
#write to file
write.csv(train.df,"train.csv", row.names = F)
write.csv(test.df,"test.df", row.names = F)
getwd()
dir()
write.csv(test.df,"test.csv", row.names = F)
dir()
outcome.name <- 'final_outcome_death'
n <- nrow(df); df <- na.omit(df); y.idx <- grep(outcome.name, colnames(df))
#get x and y dataframes
df.x <- df[,-y.idx]; df.y <- as.factor(df[,y.idx])
levels(df.y) <- c('X0','X1')
df <- train.df
outcome.name <- 'final_outcome_death'
n <- nrow(df); df <- na.omit(df); y.idx <- grep(outcome.name, colnames(df))
#get x and y dataframes
df.x <- df[,-y.idx]; df.y <- as.factor(df[,y.idx])
levels(df.y) <- c('X0','X1')
#fit rf
rfFuncs$summary <- twoClassSummary;
ctrl <- rfeControl(functions=rfFuncs, method = 'cv', repeats = 5,verbose = F,
allowParallel = T,saveDetails = T)
subsets <- seq(1,25,3)
rf <- rfe(x=df.x,y=df.y,sizes = subsets, metric = "ROC", rfeControl = ctrl)
#get roc value
idx <- rf$results$Variables == rf$optsize
roc.val.caret <- rf$results[idx,2]
#get roc from test set
roc.val.pROC <- pROC::roc(as.factor(test.df$final_outcome_death), predict(rf, test.df, 'prob')[,3], ci = T)
roc.val.caret
roc.val.pROC
#get roc from test set
roc.val.pROC <- pROC::roc(as.factor(test.df$final_outcome_death), predict(rf, test.df, 'prob'), ci = T)
#get roc from test set
roc.val.pROC <- pROC::roc(as.factor(test.df$final_outcome_death), predict(rf, test.df, 'prob')$X1, ci = T)
roc.val.pROC
rf
str(train.df)
#load data
sample.df <- read.csv('train.csv')
test.df <- read.csv('test.csv')
#load data
sample.df <- read.csv('train.csv')
test.df <- read.csv('test.csv')
factor.vars <- c("sex","Abnormal_BCS","hivFinal","bednet","final_outcome_death", "boiling", "hivMaternal", "malaria", "sibling_deaths")
sample.df <- sample.df %>%
mutate_at(vars(factor.vars),factor)
test.df <- test.df %>%
mutate_at(vars(factor.vars),factor)
#load data
sample.df <- read.csv('train.csv')
''test.df <- read.csv('test.csv')
#load data
sample.df <- read.csv('train.csv')
test.df <- read.csv('test.csv')
factor.vars <- c("sex","Abnormal_BCS","hivFinal","bednet","final_outcome_death", "boiling", "hivMaternal", "malaria", "sibling_deaths")
sample.df <- sample.df %>%
mutate_at(vars(factor.vars),factor)
test.df <- test.df %>%
mutate_at(vars(factor.vars),factor)
df <- sample.df
outcome.name <- 'final_outcome_death'
n <- nrow(df); df <- na.omit(df); y.idx <- grep(outcome.name, colnames(df))
#get x and y dataframes
df.x <- df[,-y.idx]; df.y <- as.factor(df[,y.idx])
levels(df.y) <- c('X0','X1')
#fit rf
rfFuncs$summary <- twoClassSummary;
ctrl <- rfeControl(functions=rfFuncs, method = 'cv', repeats = 5,verbose = F,
allowParallel = T,saveDetails = T)
subsets <- seq(1,25,3)
rf <- rfe(x=df.x,y=df.y,sizes = subsets, metric = "ROC", rfeControl = ctrl)
#get roc value
idx <- rf$results$Variables == rf$optsize
roc.val.caret <- rf$results[idx,2]
#get roc from test set
roc.val.pROC <- pROC::roc(as.factor(test.df$final_outcome_death), predict(rf, test.df, 'prob')$X1, ci = T)
rf
rfFuncs
